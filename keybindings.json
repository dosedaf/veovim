// This profile separates in-editor actions from panel management.
[
  // ===================================================================
  //  1. In-Editor Workflows (<Space> Leader Key)
  //  - Use for actions that DO NOT move focus away from the editor.
  //  - "editorTextFocus" ensures these only trigger when the editor is active.
  // ===================================================================
  {
    "key": "space y",
    "command": "vscode-neovim.send",
    "args": {
      "args": [
        "\"+y"
      ]
    },
    "when": "(neovim.mode == 'visual' || neovim.mode == 'visualLine') && editorTextFocus",
    "comment": "Yank selection to the system clipboard."
  },
  {
    "key": "space f",
    "command": "workbench.action.quickOpen",
    "when": "neovim.mode != 'insert' && editorTextFocus",
    "comment": "Fuzzy find a file (quick open)."
  },
  {
    "key": "space /",
    "command": "workbench.action.findInFiles",
    "when": "neovim.mode != 'insert' && editorTextFocus",
    "comment": "Find in all files (opens search panel but is part of code discovery)."
  },
  {
    "key": "space s",
    "command": "workbench.action.gotoSymbol",
    "when": "neovim.mode != 'insert' && editorTextFocus",
    "comment": "Go to a symbol in the current editor."
  },
  {
    "key": "space g d",
    "command": "editor.action.revealDefinition",
    "when": "neovim.mode != 'insert' && editorHasDefinitionProvider && editorTextFocus",
    "comment": "Go to definition."
  },
  {
    "key": "space g i",
    "command": "editor.action.goToImplementation",
    "when": "neovim.mode != 'insert' && editorHasImplementationProvider && editorTextFocus",
    "comment": "Go to implementation."
  },
  {
    "key": "space l",
    "command": "workbench.action.nextEditor",
    "when": "neovim.mode != 'insert' && editorTextFocus",
    "comment": "Cycle to the next buffer/editor tab."
  },
  {
    "key": "space h",
    "command": "workbench.action.previousEditor",
    "when": "neovim.mode != 'insert' && editorTextFocus",
    "comment": "Cycle to the previous buffer/editor tab."
  },
  // ===================================================================
  //  2. Panel & UI Management (Alt Modifier)
  //  - Use for actions that DO move focus to other panels.
  // ===================================================================
  {
    "key": "alt+j",
    "command": "workbench.action.focusActiveEditorGroup",
    "comment": "Focus on the editor group (from any panel)."
  },
  {
    "key": "alt+k",
    "command": "workbench.action.togglePanel",
    "comment": "Toggle visibility of the entire bottom panel (Terminal, Problems, etc.)."
  },
  {
    "key": "alt+b",
    "command": "workbench.action.toggleSidebarVisibility",
    "comment": "Toggle sidebar visibility."
  },
  {
    "key": "alt+m",
    "command": "workbench.action.toggleMenuBar",
    "comment": "Toggle menu bar visibility."
  },
  {
    "key": "alt+e",
    "command": "workbench.view.explorer",
    "comment": "Open/toggle the file explorer."
  },
  {
    "key": "alt+t",
    "command": "workbench.action.terminal.focus",
    "comment": "Focus on the terminal panel (without creating a new one)."
  },
  {
    "key": "alt+shift+t",
    "command": "workbench.action.terminal.new",
    "comment": "Create a new terminal."
  },
  {
    "key": "alt+x",
    "command": "workbench.view.extensions",
    "comment": "Open the extensions view."
  },
  {
    "key": "alt+p",
    "command": "workbench.actions.view.problems",
    "comment": "Toggle visibility of the 'problems' panel (opens and closes it)."
  },
  // ===================================================================
  //  3. Contextual: Terminal Management
  //  - These keys work ONLY when you are focused on the terminal.
  // ===================================================================
  {
    "key": "alt+s",
    "command": "workbench.action.terminal.split",
    "when": "terminalFocus",
    "comment": "Split the active terminal."
  },
  {
    "key": "alt+w",
    "command": "workbench.action.terminal.focusNextPane",
    "when": "terminalFocus",
    "comment": "Cycle focus between split terminal panes."
  },
  {
    "key": "alt+q",
    "command": "workbench.action.terminal.kill",
    "when": "terminalFocus",
    "comment": "Kill the focused terminal."
  },
  {
    "key": "alt+l",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus",
    "comment": "Cycle to the next terminal tab."
  },
  {
    "key": "alt+h",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus",
    "comment": "Cycle to the previous terminal tab."
  },
  // ===================================================================
  //  4. Contextual: Explorer File/Directory Management
  //  - These keys work ONLY when you are focused on the explorer.
  // ===================================================================
  {
    "key": "a",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && !inputFocus",
    "comment": "Create a new file."
  },
  {
    "key": "shift+a",
    "command": "explorer.newFolder",
    "when": "filesExplorerFocus && !inputFocus",
    "comment": "Create a new directory."
  },
  {
    "key": "d",
    "command": "deleteFile",
    "when": "filesExplorerFocus && !inputFocus",
    "comment": "Delete the selected file/directory."
  },
  {
    "key": "r",
    "command": "renameFile",
    "when": "filesExplorerFocus && !inputFocus",
    "comment": "Rename the selected file/directory."
  }
]